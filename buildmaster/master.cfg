# VTR BUILDMASTER CONFIGURATION FILE
# -*- python -*-

# This is the buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import sys

admin_email = "vtr-builds@googlegroups.com"

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.

c = BuildmasterConfig = {}

####### BUILDSLAVES
# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.

from buildbot.buildslave import BuildSlave

bs1 = BuildSlave(
                 "slave_basic",
                 "vancouver",
                 notify_on_missing=admin_email,
                 max_builds=2
                )
               
bs2 = BuildSlave(
                 "slave_strong",
                 "newyork", 
                 notify_on_missing=admin_email,
                 max_builds=2
                )

bs3 = BuildSlave(
                 "slave_nightly",
                 "winnipeg",
                 notify_on_missing=admin_email,
                 max_builds=1                 
                )

bs4 = BuildSlave(
                 "slave_weekly",
                 "quebec",
                 notify_on_missing=admin_email,
                 max_builds=1                 
                )
bs5 = BuildSlave(
                 "slave_configs",
                 "ottawa",
                 notify_on_missing=admin_email,
                 max_builds=1                 
                )

# Windows latent (on-demand) build slave using libvirt
# Starts KVM when a Windows build is needed
from buildbot.buildslave.libvirt import LibVirtSlave, Connection

# Open the windows_snapshot description and convert to a string
bs6 = LibVirtSlave(
                 name="Buildbot-WIN10",
                 password="edmonton",
                 connection=Connection("qemu:///system"), #system used instead of session as the VM is run on root
                 hd_image="/home/vtrbot/Buildbot-WIN10.tmp.qcow2", #Note this is the HD image clone file created/destroyed by buildbot
                 base_image="/scratch/VM/Buildbot-WIN10.qcow2", #This is the source image which is cloned
                 build_wait_timeout=30,
                 )

c['slaves'] = [bs1, bs2, bs3, bs4, bs5, bs6] 

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 3462


####### CHANGESOURCES
# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.
from buildbot.changes.gitpoller import GitPoller
source_code_git_url='https://github.com/verilog-to-routing/vtr-verilog-to-routing.git'

#Note: We use GitPoller, rather than using a hook since it allows us to track
#all revisions (i.e. if BuildBot goes offline, an hook updates will be skipped; the poller catches up)
c['change_source'] = GitPoller(
                               source_code_git_url,
                               branch='master',
                               workdir='/home/vtrbot/gitpoller_workdir',
                               pollinterval=2*60,
                              )

####### SCHEDULERS
# the 'schedulers' setting tells the buildmaster when to run builds.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.scheduler import Nightly

# 2 MINUTES AFTER ANY CHANGE
s1 = SingleBranchScheduler(
               name="scheduler_basic", 
               branch='master',
               treeStableTimer=2*60,
               builderNames=["basic"]
              )

# 10 MINUTES AFTER ANY CHANGE
s2 = SingleBranchScheduler(
               name="scheduler_strong",
               branch='master',
               treeStableTimer=10*60,
               builderNames=["strong"]
              )

s3 = Nightly(
             name="scheduler_nightly",
             branch='master',
             builderNames=["nightly"],
             hour=0,
             minute=1
            )

# Sat @ 00:01 AM
s4 = Nightly(
             name="scheduler_weekly",
             branch='master',
             builderNames=["weekly"],
             dayOfWeek=[6], #0 is Monday
             hour=0,
             minute=1
            )

s5 = Nightly(
             name="scheduler_configs",
             branch='master',
             builderNames=["build_configs"],
             hour=0,
             minute=1
            )
s6 = Nightly(
             name="scheduler_windows", 
             branch='master',
             builderNames=["windows"],
             hour=0,
             minute=1
            )

c['schedulers'] = [s1, s2, s3, s4, s5, s6]


####### FACTORIES
# the following section defines the build factories. Each one consists of
# a list of steps to be executed during a build.

from buildbot.steps.source                import Git
from buildbot.steps.shell                 import Compile, ShellCommand, WarningCountingShellCommand
from buildbot.steps.slave                 import RemoveDirectory, MakeDirectory
from buildbot.process.buildstep           import LogLineObserver
from buildbot.process.properties          import WithProperties
import os, re 
     
class TestCounter(LogLineObserver):
  numPassed = 0
  numFailed = 0
  finished = 0
  
  def outLineReceived(self, line):
    if "[Pass]" in line:
      self.numPassed += 1
    if "...OK" in line:
      self.numPassed += 1      
    if "[Fail]" in line:
      self.numFailed += 1
    if "failed:" in line:
      self.numFailed += 1
    if "Failed" in line:
      self.numFailed += 1
    if "ERROR" in line:
      self.numFailed += 1
    if "Test complete" in line:
      self.finished = 1
    if ( self.finished and self.numFailed ): 
      sys.stderr.write('One or more tests may have failed.' + '\n')
      #sys.exit(1)

    
class UnitTest(WarningCountingShellCommand):
    def __init__(self, **kwargs):
      WarningCountingShellCommand.__init__(self, **kwargs)   # always upcall!
      self.counter = TestCounter()
      self.addLogObserver('stdio', self.counter)  

def updateSourceTree(f):
    f.addStep(Git(name="git pull",
                  repourl=source_code_git_url,
                  ))

def commonInit(f, vtr_assert_level=None, vtr_sanitize=None, vtr_coverage=None, cmake_generator=None):
    updateSourceTree(f)

    f.addStep(Compile(name="make clean",
                      command=["make", "clean"],
                      haltOnFailure=True,
                      description=["Cleaning..."],
                      descriptionDone=["make clean"],
                      logEnviron=False)
                      )
    make_command = ["make"]

    cmake_params={}

    #Any non-default cmake param specifications?
    if vtr_assert_level != None:
        cmake_params['VTR_ASSERT_LEVEL'] = vtr_assert_level
    if vtr_sanitize != None:
        cmake_params['VTR_ENABLE_SANITIZE'] = vtr_sanitize
    if vtr_coverage != None:
        cmake_params['VTR_ENABLE_COVERAGE'] = vtr_coverage

    #Build the cmake params list and add it to the make command if we have custom params
    cmake_params_str = ""
    if len(cmake_params) > 0:
        for key, value in cmake_params.iteritems():
            cmake_params_str += "-D{}={} ".format(key, value)

    if cmake_generator != None:
        cmake_params_str += "-G '{}'".format(cmake_generator)

    if cmake_params_str != "":
        make_command += ["CMAKE_PARAMS=\"{}\"".format(cmake_params_str)]

    f.addStep(Compile(name="make",
                      command=make_command,
                      haltOnFailure=True,
                      description=["Compiling..."],
                      descriptionDone=["make"],
                      logEnviron=False)
                      )

    f.addStep(ShellCommand(command=["make", "test"],
                           description="Unit Tests",
                           flunkOnFailure=True #Failing a unit test fails (but does not stop) the build
                           ))

#buildstep in nightly and weekly test to download titan benchmarks and arch 
def getTitan(f, name, timeout, desc, desc_done): 
    f.addStep(Compile(name="get titan",
                           command=["make", "get_titan_benchmarks"],
                           timeout=timeout,
                           haltOnFailure=True,
                           description=desc,
                           descriptionDone=desc_done,
                           logEnviron=False)
                           )

def list_append(lst, item):
  lst.append(item)
  return lst

def addTest(f, test, name, timeout, params="", halt=True, descr=None, descr_done=None, rev=False):
    if descr is None:
        descr = name
    if descr_done is None:
        descr = name


    cmd = ["./run_reg_test.pl"]

    if params != "":
        cmd += params.split(" ")

    cmd += test.split(" ")


    valgrindWarningRegex = re.compile(r"^\s*==\d+== [\d,]+ (\(.*\) )?bytes in [\d,]+ blocks are (definitely|indirectly|possibly) lost in loss record [\d,]+ of [\d,]+")
    if rev is True:  
      t = UnitTest(name=name,
                   command=list_append(cmd, WithProperties("%(revision)s")),
                   timeout=timeout,
                   usePTY=True,
                   haltOnFailure=halt,
                   description=descr,
                   descriptionDone=descr_done,
                   logEnviron=False,
		   warningPattern=valgrindWarningRegex
                   )
    else:
      t = UnitTest(name=name,
		   command=cmd,
		   timeout=timeout,
		   usePTY=True,
		   haltOnFailure=halt,
		   description=descr,
		   descriptionDone=descr_done,
		   logEnviron=False,
		   warningPattern=valgrindWarningRegex
                   )  
    f.addStep(t)

#sort strings containing numbers
def natural_sort_key(s, _nsre=re.compile('([0-9]+)')):
    return [int(text) if text.isdigit() else text.lower()
            for text in re.split(_nsre, s)]  

#return file as list of lines
def readFile(p):
    with open(p, 'r') as f:
        log = f.readlines()
    return log

#returns list of paths to all files with specified name
def getLogPaths(path,name):
    logPaths=[]
    for dirpath, dirnames, filenames in os.walk(path):
        for d in dirnames:
          #only want log files from most recent run
          if "run" in d:
            dirnames.sort(key=natural_sort_key)
            del dirnames[0:-1]
        
        for f in filenames:
          if f==name:
            logPaths.append(os.path.join(dirpath,f))
    return logPaths


class LogStep(WarningCountingShellCommand):
    def __init__(self, **kwargs):
        WarningCountingShellCommand.__init__(self, **kwargs)   # always upcall!

    def createSummary(self,log):
        slavename = self.getProperty("slavename")
        buildername = self.getProperty("buildername")
        path = "/home/vtrbot/vtr-buildbot/" + slavename + "/" + buildername + "/build/vtr_flow/tasks/regression_tests/" 
      
        odinLog, abcLog, vprLog = self.addLog("odin"), self.addLog("abc"), self.addLog("vpr")
      
        odinPaths = getLogPaths(path, "odin.out")
        abcPaths = getLogPaths(path, "abc.out")
        vprPaths = getLogPaths(path, "vpr.out")
      
        dict = {odinLog:odinPaths, abcLog:abcPaths, vprLog:vprPaths}
        for vtrLog in dict:
            for path in dict[vtrLog]:
                logFile = readFile(path)
                for line in logFile:
                    vtrLog.addStdout(line)
                vtrLog.addStdout("\n")

# step to add log files 
def addLogFiles(f, name, desc, desc_done):
    t = LogStep(name=name,
                   command=" ",
                   description=desc,
                   descriptionDone=desc_done,
                   logEnviron=False,
                   alwaysRun=True
                   )
    f.addStep(t)
  
# populate_db on each of the tasks described by task list for test
def populate_test(f, test, params, name, timeout, halt, desc, desc_done):
    # a 'benchmark' is defined by its arch and circuit combination
    cmd = ["vtr_flow/scripts/benchtracker/populate_db.py"] + params.split(" ")
    cmd += ["--parse_script", "vtr_flow/scripts/parse_vtr_task.pl {task_dir} -run {run_number}"]
    # where the paths in the task list are relative to
    cmd += ["--root_directory", "vtr_flow/tasks/"]
    cmd.append("regression_tests/" + test +"/task_list.txt")
    t = UnitTest(name=name,
            command=cmd,
            timeout=timeout,
            usePTY=True,
            haltOnFailure=halt,
            description=desc,
            descriptionDone=desc_done,
            logEnviron=False)
    f.addStep(t)

def sweep_build_configs(f):
    cmd = ["./sweep_build_configs.py"]
    f.addStep(Compile(name="sweep build configurations",
                      command=cmd,
		      timeout=20*3600, #20 hrs
                      haltOnFailure=True,
                      description=["Building..."],
                      descriptionDone=["Swept Build Configurations"],
                      logEnviron=False)
                      )

def build_msvc(f, generator="Visual Studio 15 2017"):
    cmake = "/cygdrive/c/CMake/bin/cmake" #Explicitly use the windows version of cmake
    build_dir = "build_msvc"
    full_build_dir = "build/" + build_dir
    f.addStep(ShellCommand(command=[cmake, "-E", "make_directory", build_dir],
                           description="Create MSVC Build Dir")) #New build dir
    f.addStep(Compile(command=[cmake, "..", "-G", generator], 
                           workdir=full_build_dir,
                           description="Generate {} Project...".format(generator))) #Generate
    f.addStep(Compile(command=[cmake, "--build", ".", "--clean-first"],
                           workdir=full_build_dir,
                           description="Build {} Project...".format(generator))) #Compile

from buildbot.process                  import factory
from buildbot.process                  import properties

p = properties.Properties()

f1 = factory.BuildFactory()
commonInit(f1, vtr_assert_level=3)
getTitan(f1, "get_titan", 2*1200, "Getting Titan...", "get_titan_benchmarks")
addTest(f1, test="odin_reg_micro", name="odin_reg_micro", timeout=1*3600, halt=False, descr="Testing Odin...")
addTest(f1, test="vtr_reg_basic", name="vtr_reg_basic", timeout=4*3600, descr="Testing VTR...")
addTest(f1, test="vtr_reg_basic", name="QoR", timeout=1*3600, params="-display_qor", descr="Calculating QoR...")
addLogFiles(f1, "vtr_reg_basic", "Adding Log Files", "Log Files")
populate_test(f1, "vtr_reg_basic", "-k arch circuit -d ~/benchtracker_data/basic.db", "populate db", 2*3600, True, "Populating...", "populate db")

f2 = factory.BuildFactory()
commonInit(f2, vtr_assert_level=3)
getTitan(f2, "get_titan", 2*1200, "Getting Titan...", "get_titan_benchmarks")
addTest(f2, test="odin_reg_micro", name="odin_reg_micro", timeout=1*3600, halt=False, descr="Testing Odin...")
addTest(f2, test="vtr_reg_strong", name="vtr_reg_strong", timeout=8*3600, descr="Testing VTR...")
addTest(f2, test="vtr_reg_valgrind_small", name="vtr_reg_valgrind_small", timeout=8*3600, descr="Testing VTR...")
addTest(f2, test="vtr_reg_strong", name="QoR", timeout=1*3600, params="-display_qor", descr="Calculating QoR...")
addLogFiles(f2, "vtr_reg_strong", "Adding Log Files", "Log Files")
populate_test(f2, "vtr_reg_strong", "-k arch circuit -d ~/benchtracker_data/strong.db", "populate db", 2*3600, True, "Populating...", "populate db")

f3 = factory.BuildFactory()
commonInit(f3)
getTitan(f3, "get_titan", 2*1200, "Getting Titan...", "get_titan_benchmarks")
addTest(f3, test="odin_reg_full", name="odin_reg_full", timeout=2*3600, halt=False, descr="Testing Odin...")
addTest(f3, test="vtr_reg_nightly", name="vtr_reg_nightly", timeout=18*3600, params="-j 3", descr="Testing VTR...")
addTest(f3, test="vtr_reg_valgrind", name="vtr_reg_valgrind", timeout=8*3600, descr="Testing VTR...")
addTest(f3, test="vtr_reg_nightly", name="QoR", timeout=1*3600, params="-display_qor", descr="Calculating QoR...")
addLogFiles(f3, "vtr_reg_nightly", "Adding Log Files", "Log Files")
populate_test(f3, "vtr_reg_nightly", "-k arch circuit -d ~/benchtracker_data/nightly.db", "populate db", 2*3600, True, "Populating...", "populate db")

f4 = factory.BuildFactory()
commonInit(f4)
getTitan(f4, "get_titan", 2*1200, "Getting Titan...", "get_titan_benchmarks")
addTest(f4, test="odin_reg_full", name="odin_reg_full", timeout=1*3600, descr="Testing Odin...")
addTest(f4, test="vtr_reg_weekly", name="vtr_reg_weekly", timeout=96*3600, params="-j 4", descr="Testing VTR...")
addTest(f4, test="vtr_reg_weekly", name="QoR", timeout=1*3600, params="-display_qor", descr="Calculating QoR...")
addLogFiles(f4, "vtr_reg_weekly", "Adding Log Files", "Log Files")
populate_test(f4, "vtr_reg_weekly", "-k arch circuit -d ~/benchtracker_data/weekly.db", "populate db", 2*3600, True, "Populating...", "populate db")

f5 = factory.BuildFactory()
updateSourceTree(f5)
sweep_build_configs(f5)

# Windows build, only compiles VTR with "make clean" & "make" 
# since QoR golden_results does not match Linux caused by
# ABC's different (but functionally the same) output on Windows
f6 = factory.BuildFactory()
commonInit(f6, vtr_assert_level=3) #Cygwin build
build_msvc(f6) #MSVC build

####### BUILDERS
# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['slaves'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

b1 = {
      'name':        "basic",
      'slavename':   "slave_basic",
      'factory':     f1,
     } 

b2 = {
      'name':        "strong",
      'slavename':   "slave_strong",
      'factory':     f2,
     }

b3 = {
      'name':        "nightly",
      'slavename':   "slave_nightly",
      'factory':     f3,
     }

b4 = {
      'name':        "weekly",
      'slavename':   "slave_weekly",
      'factory':     f4,
     }

b5 = {
      'name':        "build_configs",
      'slavename':   "slave_configs",
      'factory':     f5,
     }

b6 = {
      'name':        "windows",
      'slavename':   "Buildbot-WIN10",
      'factory':     f6, 
     }

c['builders'] = [b1, b2, b3, b4, b5, b6]

# Never merge build requests
def mergeRequests(builder, req1, req2):
   return False

c['mergeRequests'] = mergeRequests

# Prioritize shorter builds
def prioritizeBuilders(buildmaster, builders):
   builderOrder = {
                    "basic":   0,
                    "strong":  1,
                    "nightly": 2,
                    "weekly":  3,
                    "build_configs": 4,
                    "windows": 5,
                   }
#   builders.sort(key=lambda b: builderOrder.get(b.name, 0))
   builders.sort(key=lambda b: builderOrder[b.name])
   return builders

c['prioritizeBuilders'] = prioritizeBuilders


####### STATUS TARGETS
# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web.auth import BasicAuth
from buildbot.status.web.authz import Authz
from buildbot.interfaces import IEmailLookup
from zope.interface import implements
from buildbot.status.words import IRC

authz = Authz( 
               forceBuild=True 
              )

c['status'].append(html.WebStatus(
                http_port=8080,
                authz=authz
              ))

c['status'].append(IRC(host="irc.freenode.org", 
			nick="vtrbot", 
			channels=["#vtr-dev"],
			allowForce=True))


from buildbot.status import mail

# lookup up email from Git assuming format of "Full Name <email>"
class EmailLookUp:
    implements(IEmailLookup)
    
    def getAddress(self, user):
        return user.split('<')[1].split('>')[0]

maillookup = EmailLookUp()
c['status'].append(mail.MailNotifier(
                                     fromaddr="buildbot@picton.eecg.toronto.edu",
                                     mode=("warnings", "problem"),
                                     sendToInterestedUsers=True,
                                     lookup=maillookup,
                                     builders=['basic', 'strong', 'configs', 'windows']
                                     )
                                   )

c['status'].append(mail.MailNotifier(
                                     fromaddr="buildbot@picton.eecg.toronto.edu",
                                     mode=("warnings", "problem"),
                                     sendToInterestedUsers=True,
                                     builders=['nightly', 'weekly'],
				     extraRecipients=['vtr-builds@googlegroups.com']
                                     )
                                   )
                                  

# PB Listener for 'statuslog' and 'statusgui'
#import buildbot.status.client
#pbl = buildbot.status.client.PBListener(
#                                        port=8010,
#                                        user="admin",
#                                        passwd="admin"
#                                       )
#c['status'].append(pbl)


####### DEBUGGING OPTIONS
# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY
# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Verilog-to-Routing (VTR)"
c['projectURL'] = "https://verilogtorouting.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "builds.verilogtorouting.org:8080/"
